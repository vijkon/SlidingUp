apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"
    defaultConfig {
        applicationId "com.app.slidingup"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes
     {
        debug
        {
            buildConfigField "String", 'BASE_URL', "\"https://en.wikipedia.org/w/\""
            buildConfigField "String", 'DIRECTION_API_URL', "\"https://maps.googleapis.com/maps/api/directions/\""
            buildConfigField "String", 'MAP_API_kEY', "\"AIzaSyAX6CicVvm7Y7yPkQd6k1ra0VSrTLcoBpQ\""
        }
        release
        {
            buildConfigField "String", 'BASE_URL', "\"https://en.wikipedia.org/w/\""
            buildConfigField "String", 'DIRECTION_API_URL', "\"https://maps.googleapis.com/maps/api/directions/\""
            buildConfigField "String", 'MAP_API_kEY', "\"AIzaSyAX6CicVvm7Y7yPkQd6k1ra0VSrTLcoBpQ\""

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // AndroidX constraintlayout dependency
    def constraintlayout_version = "1.1.3"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"

    // AndroidX appcompat dependency
    def appcompat_version = "1.0.2"
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    // AndroidX material design
    def material_version = "1.0.0"
    implementation "com.google.android.material:material:$material_version"

    //Dagger2 core dependencies Injection
    def dagger_version = "2.22.1"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // Dagger Android dependencies Injection
    def dagger_android_version = "2.22.1"
    implementation "com.google.dagger:dagger-android:$dagger_android_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_android_version" // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$dagger_android_version"

    //Android lifecycle dependency Injection
    def lifecycle_version = '2.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    //Fresco dependency
    def fresco_version = '2.0.0'
    implementation "com.facebook.fresco:fresco:$fresco_version"

    //Co-routines dependency Injection
    def coroutines_android_version = '1.1.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"

    def coroutines_adapter_version = "0.9.2"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutines_adapter_version"

    //Retrofit dependency Injection
    def retrofitVersion = "2.5.0"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Google Maps Android dependencies
    def google_map_version = "17.0.0"
    implementation "com.google.android.gms:play-services-maps:$google_map_version"

    // Google Location Android dependencies
    def google_location_version = "17.0.0"
    implementation "com.google.android.gms:play-services-location:$google_location_version"

    // Junit dependency Injection
    def junit_version = "4.12"
    testImplementation "junit:junit:$junit_version"

    // MOCKITO dependency Injection
    def mockito_version = "2.19.0"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    //Unit test JSON parsing Dependency Injection
    def json_test_version = "20140107"
    testImplementation "org.json:json:$json_test_version"
}
